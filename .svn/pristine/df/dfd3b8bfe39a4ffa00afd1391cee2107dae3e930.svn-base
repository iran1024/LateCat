using LateCat.Helpers;
using LateCat.Models;
using LateCat.PoseidonEngine.Abstractions;
using LateCat.PoseidonEngine.Core;
using LateCat.PoseidonEngine.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading;

namespace LateCat.ViewModels
{
    public class WallpaperLibraryViewModel : ObservableObject
    {
        private readonly List<string> wallpaperScanFolders = new List<string>() {
                Path.Combine(Program.WallpaperDir, "wallpapers"),
                Path.Combine(Program.WallpaperDir, "SaveData", "wptmp")
            };
        private readonly IDesktopCore desktopCore;
        private readonly ISettingsService userSettings;
        private readonly SettingsViewModel settingsVm;

        public WallpaperLibraryViewModel(ISettingsService userSettings, IDesktopCore desktopCore, SettingsViewModel settingsVm)
        {
            this.userSettings = userSettings;
            this.desktopCore = desktopCore;
            this.settingsVm = settingsVm;

            foreach (var item in ScanWallpaperFolders(wallpaperScanFolders))
            {
                LibraryItems.Add(item);
            }

            desktopCore.WallpaperChanged += SetupDesktop_WallpaperChanged;
            settingsVm.GUIStateChanged += SettingsVM_LivelyGUIStateChanged;
            settingsVm.LivelyWallpaperDirChange += SettingsVM_LivelyWallpaperDirChange;
        }

        #region collections

        private ObservableCollection<IWallpaperMetadata> _libraryItems = new();
        public ObservableCollection<IWallpaperMetadata> LibraryItems
        {
            get { return _libraryItems; }
            set
            {
                if (value != _libraryItems)
                {
                    _libraryItems = value;
                    OnPropertyChanged();
                }
            }
        }

        private ObservableCollection<IWallpaperMetadata> _libraryItemsFiltered;
        public ObservableCollection<IWallpaperMetadata> LibraryItemsFiltered
        {
            get { return _libraryItemsFiltered; }
            set
            {
                if (value != _libraryItemsFiltered)
                {
                    _libraryItemsFiltered = value;
                    OnPropertyChanged();
                }
            }
        }

        private string _searchText;
        public string SearchText
        {
            get { return _searchText; }
            set
            {
                _searchText = value;
                FilterCollection(_searchText);
                OnPropertyChanged();
            }
        }

        private IWallpaperMetadata _selectedItem;
        public IWallpaperMetadata SelectedItem
        {
            get
            {
                return _selectedItem;
            }
            set
            {
                if (value != null)
                {
                    var wp = desktopCore.Wallpapers.Where(x => x.Metadata == value);
                    if (wp.Count() > 0)
                    {
                        switch (userSettings.Settings.WallpaperArrangement)
                        {
                            case WallpaperArrangement.Per:
                                if (!wp.Any(x => userSettings.Settings.SelectedMonitor.Equals(x.Monitor)))
                                {
                                    desktopCore.SetWallpaper(value, userSettings.Settings.SelectedMonitor);
                                }
                                break;
                            case WallpaperArrangement.Span:
                                //Wallpaper already set!
                                break;
                            case WallpaperArrangement.Duplicate:
                                //Wallpaper already set!
                                break;
                        }
                    }
                    else
                    {
                        desktopCore.SetWallpaper(value, userSettings.Settings.SelectedMonitor);
                    }
                }
                _selectedItem = value;
                OnPropertyChanged();
            }
        }

        #endregion //collections

        #region wallpaper operations

        public void WallpaperShowOnDisk(object obj)
        {
            var selection = (IWallpaperMetadata)obj;
            string folderPath;
            if (selection.WallpaperInfo.Type == WallpaperType.Url
            || selection.WallpaperInfo.Type == WallpaperType.VideoStream)
            {
                folderPath = selection.InfoFolderPath;
            }
            else
            {
                folderPath = selection.FilePath;
            }
            FileOperations.OpenFolder(folderPath);
        }

        public async void WallpaperDelete(object obj)
        {
            var selection = (IWallpaperMetadata)obj;
            //close if running.
            desktopCore.CloseWallpaper(selection, true);
            //delete wp folder.      
            var success = await FileOperations.DeleteDirectoryAsync(selection.InfoFolderPath, 1000, 4000);

            if (success)
            {
                if (SelectedItem == selection)
                {
                    SelectedItem = null;
                }
                //remove from library.
                LibraryItems.Remove(selection);
                try
                {
                    if (string.IsNullOrEmpty(selection.InfoFolderPath))
                        return;

                    //Delete LivelyProperties.json backup folder.
                    string[] wpdataDir = Directory.GetDirectories(Path.Combine(Program.WallpaperDir, "SaveData", "wpdata"));
                    var wpFolderName = new DirectoryInfo(selection.InfoFolderPath).Name;
                    for (int i = 0; i < wpdataDir.Length; i++)
                    {
                        var item = new DirectoryInfo(wpdataDir[i]).Name;
                        if (wpFolderName.Equals(item, StringComparison.Ordinal))
                        {
                            _ = FileOperations.DeleteDirectoryAsync(wpdataDir[i], 1000, 4000);
                            break;
                        }
                    }
                }
                catch (Exception e)
                {

                }
            }
        }

        static readonly SemaphoreSlim semaphoreSlimInstallLock = new SemaphoreSlim(1, 1);


        public void WallpaperVideoConvert(object obj)
        {
            var selection = (IWallpaperMetadata)obj;
            var model = new Wallpaper(selection.WallpaperInfo, selection.InfoFolderPath, WallpaperProcessStatus.videoConvert, userSettings.Settings.GUIRendering == GUIState.normal);
            desktopCore.SetWallpaper(model, userSettings.Settings.SelectedMonitor);
        }

        #endregion //wallpaper operations

        #region context actions

        /*
        public RelayCommand SetWallpaperItemClicked { get; set; }
        public RelayCommand DeleteWallpaperItemClicked { get; set; }
        public RelayCommand ShowDiskWallpaperItemClicked { get; set; }
        public RelayCommand ZipWallpaperItemClicked { get; set; }
        */

        #endregion //context actions

        #region helpers

        public void AddWallpaper(string path, WallpaperType wpType, WallpaperProcessStatus dataType, IMonitor screen, string cmdArgs = null)
        {
            var dir = Path.Combine(Program.WallpaperDir, "SaveData", "wptmp", Path.GetRandomFileName());
            if (dataType == WallpaperProcessStatus.processing ||
                dataType == WallpaperProcessStatus.cmdImport ||
                dataType == WallpaperProcessStatus.multiImport)
            {
                //Preview gif and thumbnail to be captured..
                //Create a tile at index 0, updates value realtime.
                try
                {
                    Directory.CreateDirectory(dir);
                }
                catch (Exception e)
                {

                    return;
                }
                var data = new WallpaperInfo()
                {
                    Title = Properties.Resources.TextProcessingWallpaper + "...",
                    Type = wpType,
                    IsAbsolutePath = true,
                    FileName = path,
                    Preview = null,
                    Thumbnail = null,
                    Arguments = cmdArgs
                };
                var model = new Wallpaper(data, dir, dataType, userSettings.Settings.GUIRendering == GUIState.normal);
                LibraryItems.Insert(0, model);
                desktopCore.SetWallpaper(model, screen);
            }
        }

        public void AddWallpaper(string folderPath)
        {
            var libItem = ScanWallpaperFolder(folderPath);
            if (libItem != null)
            {
                var binarySearchIndex = BinarySearch(LibraryItems, libItem.Title);
                LibraryItems.Insert(binarySearchIndex, libItem);
            }
        }

        public void EditWallpaper(IWallpaperMetadata obj)
        {
            //Kill wp if running..
            desktopCore.CloseWallpaper(obj, true);
            LibraryItems.Remove(obj);
            obj.Status = WallpaperProcessStatus.edit;
            LibraryItems.Insert(0, obj);
            desktopCore.SetWallpaper(obj, MonitorHelper.GetPrimaryMonitor());
        }

        /// <summary>
        /// Load wallpapers from the given parent folder(), only top directory is scanned.
        /// </summary>
        /// <param name="folderPaths">Parent folders to search for subdirectories.</param>
        /// <returns>Sorted(based on Title) wallpaper data.</returns>
        private List<Wallpaper> ScanWallpaperFolders(List<string> folderPaths)
        {
            List<String[]> dir = new List<string[]>();
            for (int i = 0; i < folderPaths.Count; i++)
            {
                try
                {
                    dir.Add(Directory.GetDirectories(folderPaths[i], "*", SearchOption.TopDirectoryOnly));
                }
                catch
                {

                }
            }
            List<Wallpaper> tmpLibItems = new List<Wallpaper>();

            for (int i = 0; i < dir.Count; i++)
            {
                for (int j = 0; j < dir[i].Length; j++)
                {
                    var currDir = dir[i][j];
                    var libItem = ScanWallpaperFolder(currDir);
                    if (libItem != null)
                    {
                        tmpLibItems.Add(libItem);
                    }
                }
            }
            return SortWallpapers(tmpLibItems);
        }

        private Wallpaper ScanWallpaperFolder(string folderPath)
        {
            if (File.Exists(Path.Combine(folderPath, "LivelyInfo.json")))
            {
                WallpaperInfo info = null;
                try
                {
                    info = Json<WallpaperInfo>.LoadData(Path.Combine(folderPath, "LivelyInfo.json"));
                }
                catch (Exception e)
                {

                }

                if (info != null)
                {
                    if (info.Type == WallpaperType.VideoStream || info.Type == WallpaperType.Url)
                    {
                        return new Wallpaper(info, folderPath, WallpaperProcessStatus.ready, userSettings.Settings.GUIRendering == GUIState.normal);
                    }
                    else
                    {
                        if (info.IsAbsolutePath)
                        {

                        }
                        else
                        {

                        }
                        return new Wallpaper(info, folderPath, WallpaperProcessStatus.ready, userSettings.Settings.GUIRendering == GUIState.normal);
                    }
                }
            }
            else
            {

            }
            return null;
        }

        private List<Wallpaper> SortWallpapers(List<Wallpaper> data)
        {
            try
            {
                return data.OrderBy(x => x.WallpaperInfo.Title).ToList();
            }
            catch (ArgumentNullException)
            {
                return null;
            }
        }

        public void SortLibraryItem(Wallpaper item)
        {
            LibraryItems.Remove(item);
            var binarySearchIndex = BinarySearch(LibraryItems, item.Title);

            LibraryItems.Insert(binarySearchIndex, item);
        }

        //ref: https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/listview-filtering
        private void FilterCollection(string str)
        {
            /*In order for the ListView to animate in the most intuitive way when adding and subtracting items, 
            it's important to remove and add items to the ListView's ItemsSource collection itself*/
            var tmpFilter = LibraryItems.Where(item => item.WallpaperInfo.Title.Contains(str, StringComparison.OrdinalIgnoreCase)).ToList();
            // First, remove any objects in LibraryItemsFiltered that are not in tmpFilter
            for (int i = 0; i < LibraryItemsFiltered.Count; i++)
            {
                var item = LibraryItemsFiltered[i];
                if (!tmpFilter.Contains(item))
                {
                    LibraryItemsFiltered.Remove(item);
                }
            }

            /* Next, add back any objects that are included in tmpFilter and may 
            not currently be in LibraryItemsFiltered (in case of a backspace) */
            for (int i = 0; i < tmpFilter.Count; i++)
            {
                var item = tmpFilter[i];
                if (!LibraryItemsFiltered.Contains(item))
                {
                    var index = BinarySearch(LibraryItemsFiltered, item.Title);
                    LibraryItemsFiltered.Insert(index, item);
                }
            }
        }

        private int BinarySearch(ObservableCollection<IWallpaperMetadata> item, string x)
        {
            if (x is null)
            {
                throw new ArgumentNullException(nameof(x));
            }

            int l = 0, r = item.Count - 1, m, res;
            while (l <= r)
            {
                m = (l + r) / 2;

                res = String.Compare(x, item[m].Title);

                if (res == 0)
                    return m;

                if (res > 0)
                    l = m + 1;

                else
                    r = m - 1;
            }
            return l;//(l - 1);
        }

        #endregion //helpers

        #region setupdesktop

        public void SetupDesktop_WallpaperChanged(object sender, EventArgs e)
        {
            System.Windows.Application.Current.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority.Background,
            new System.Threading.ThreadStart(delegate
            {
                SelectedItem = userSettings.Settings.WallpaperArrangement == WallpaperArrangement.Span && desktopCore.Wallpapers.Count > 0 ?
                    desktopCore.Wallpapers[0].Metadata :
                    desktopCore.Wallpapers.FirstOrDefault(wp => userSettings.Settings.SelectedMonitor.Equals(wp.Monitor))?.Metadata;
            }));
        }

        #endregion //setupdesktop

        #region settings changed

        private void SettingsVM_LivelyGUIStateChanged(object sender, GUIState mode)
        {
            if (mode == GUIState.normal)
            {
                foreach (var item in LibraryItems)
                {
                    item.ImagePath = File.Exists(item.PreviewClipPath) ? item.PreviewClipPath : item.ThumbnailPath;
                }
            }
            else if (mode == GUIState.lite)
            {
                foreach (var item in LibraryItems)
                {
                    item.ImagePath = item.ThumbnailPath;
                }
            }
        }

        private void SettingsVM_LivelyWallpaperDirChange(object sender, string dir)
        {
            LibraryItems.Clear();
            wallpaperScanFolders.Clear();
            wallpaperScanFolders.Add(Path.Combine(dir, "wallpapers"));
            wallpaperScanFolders.Add(Path.Combine(dir, "SaveData", "wptmp"));

            foreach (var item in ScanWallpaperFolders(wallpaperScanFolders))
            {
                LibraryItems.Add(item);
            }
        }

        //todo: do it automatically using filesystem watcher..
        /// <summary>
        /// Rescans wallpaper directory and update library.
        /// </summary>
        public void WallpaperDirectoryUpdate()
        {
            LibraryItems.Clear();
            foreach (var item in ScanWallpaperFolders(wallpaperScanFolders))
            {
                LibraryItems.Add(item);
            }
        }

        #endregion //settings changed
    }
}
