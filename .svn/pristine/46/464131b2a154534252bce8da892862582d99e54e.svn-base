using LateCat.Helpers;
using LateCat.Models;
using LateCat.PoseidonEngine.Abstractions;
using LateCat.PoseidonEngine.Core;
using LateCat.PoseidonEngine.Models;
using LateCat.PoseidonEngine.Utilities;
using LateCat.Views;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using System.Linq;

namespace LateCat.ViewModels
{
    class LibraryPreviewViewModel : ObservableObject
    {
        private readonly IWallpaperMetadata _metadata;
        private readonly ILibraryPreview Winstance;
        private readonly IWallpaperInfo livelyInfoCopy;
        private readonly string thumbnailOriginalPath;

        private readonly ISettingsService _settings;
        private readonly WallpaperLibraryViewModel _libraryVm;

        public LibraryPreviewViewModel(ILibraryPreview wInterface, IWallpaper wallpaper)
        {
            _settings = App.Services.GetRequiredService<ISettingsService>();
            _libraryVm = App.Services.GetRequiredService<WallpaperLibraryViewModel>();

            Winstance = wInterface;

            _metadata = wallpaper.Metadata;
            if (_metadata.Status == WallpaperProcessStatus.edit)
            {
                //taking backup to restore original data if user cancel..
                livelyInfoCopy = new WallpaperInfo(_metadata.WallpaperInfo);
                thumbnailOriginalPath = _metadata.ThumbnailPath;

                //use existing data for editing already imported wallpaper..
                Title = _metadata.WallpaperInfo.Title;
                Desc = _metadata.WallpaperInfo.Desc;
                Url = _metadata.WallpaperInfo.Contact;
                Author = _metadata.WallpaperInfo.Author;

                //consistency..
                _metadata.ImagePath = _metadata.ThumbnailPath;
            }
            else
            {
                //guess data based on filename, window title etc..
                if (_metadata.WallpaperInfo.Type == WallpaperType.VideoStream)
                {
                    Url = _metadata.FilePath;
                    Title = GetLastSegmentUrl(_metadata.FilePath);
                }
                else if (_metadata.WallpaperInfo.Type == WallpaperType.Url
                    || _metadata.WallpaperInfo.Type == WallpaperType.Web
                    || _metadata.WallpaperInfo.Type == WallpaperType.WebAudio)
                {
                    if (_metadata.WallpaperInfo.Type == WallpaperType.Url)
                        Url = _metadata.FilePath;

                    Title = GetLastSegmentUrl(_metadata.FilePath);
                }
                else
                {
                    try
                    {
                        Title = Path.GetFileNameWithoutExtension(_metadata.FilePath);
                    }
                    catch (ArgumentException)
                    {
                        Title = _metadata.FilePath;
                    }

                    if (String.IsNullOrWhiteSpace(Title))
                    {
                        Title = _metadata.FilePath;
                    }
                }

                if (_metadata.Status == WallpaperProcessStatus.cmdImport ||
                    _metadata.Status == WallpaperProcessStatus.multiImport)
                {
                    //skip black-transition/intro clip of video clips if any..
                    wallpaper.SetPlaybackPos(35, PlaybackPosType.Absolute);
                }
            }
        }


        #region data

        private string _title;
        public string Title
        {
            get { return _title; }
            set
            {
                _title = (value?.Length > 100 ? value.Substring(0, 100) : value);
                _metadata.Title = _title;
                _metadata.WallpaperInfo.Title = _title;
                OnPropertyChanged();
            }
        }

        private string _desc;
        public string Desc
        {
            get { return _desc; }
            set
            {
                _desc = (value?.Length > 5000 ? value.Substring(0, 5000) : value);
                _metadata.Desc = _desc;
                _metadata.WallpaperInfo.Desc = _desc;
                OnPropertyChanged();
            }
        }

        private string _author;
        public string Author
        {
            get { return _author; }
            set
            {
                _author = (value?.Length > 100 ? value.Substring(0, 100) : value);
                _metadata.Author = _author;
                _metadata.WallpaperInfo.Author = _author;
                OnPropertyChanged();
            }
        }

        private string _url;
        public string Url
        {
            get { return _url; }
            set
            {
                _url = value;
                try
                {
                    _metadata.SrcWebsite = LinkHandler.SanitizeUrl(_url);
                }
                catch
                {
                    _metadata.SrcWebsite = null;
                }
                _metadata.WallpaperInfo.Contact = _url;
                OnPropertyChanged();
            }
        }

        #endregion data

        #region ui 

        private bool _isUserEditable = true;
        public bool IsUserEditable
        {
            get { return _isUserEditable; }
            set
            {
                _isUserEditable = value;
                OnPropertyChanged();
            }
        }

        private double _currentProgress;
        public double CurrentProgress
        {
            get { return _currentProgress; }
            set
            {
                _currentProgress = value;
                OnPropertyChanged();
            }
        }

        public void OnWindowClosed(object sender, EventArgs e)
        {
            CleanUp();
        }

        #endregion ui

        #region interface methods

        private bool _canCancelOperation = true;
        private void WInstance_CaptureProgress(object sender, double value)
        {
            if (_canCancelOperation)
            {
                _canCancelOperation = false;
                CancelCommand.RaiseCanExecuteChanged();
            }

            CurrentProgress = value;
            if (CurrentProgress == 100)
            {
                Winstance.Exit();
            }
        }


        private RelayCommand _cancelCommand;
        public RelayCommand CancelCommand
        {
            get
            {
                if (_cancelCommand == null)
                {
                    _cancelCommand = new RelayCommand(
                        param => Winstance.Exit(), param => _canCancelOperation);
                }
                return _cancelCommand;
            }
            private set
            {
                _cancelCommand = value;
            }
        }

        private void WInstance_ThumbnailUpdated(object sender, string path)
        {
            _metadata.ImagePath = null;
            _metadata.ImagePath = path;
            _metadata.WallpaperInfo.Thumbnail = _metadata.WallpaperInfo.IsAbsolutePath ? path : Path.GetFileName(path);
            _metadata.ThumbnailPath = path;
        }

        private void WInstance_PreviewUpdated(object sender, string path)
        {
            if (_settings.Settings.GUIRendering != GUIState.lite)
            {
                _metadata.ImagePath = null;
                _metadata.ImagePath = path;
            }
            _metadata.WallpaperInfo.Preview = _metadata.WallpaperInfo.IsAbsolutePath ? path : Path.GetFileName(path);
            _metadata.PreviewClipPath = path;
        }

        private void CleanUp()
        {
            if (CurrentProgress == 100)
            {
                //user pressed ok..everything went well :)
                try
                {
                    Json<WallpaperInfo>.StoreData(
                        Path.Combine(_metadata.InfoFolderPath, "LivelyInfo.json"), _metadata.WallpaperInfo);
                }
                catch
                {

                }

                //change from pos 0..
                _metadata.Status = WallpaperProcessStatus.ready;
                _libraryVm.SortLibraryItem((Wallpaper)_metadata);
            }
            else
            {
                //user close or 'x' btn press..
                if (_metadata.Status == WallpaperProcessStatus.edit)
                {
                    //restore previous data..
                    Title = livelyInfoCopy.Title;
                    Desc = livelyInfoCopy.Desc;
                    Author = livelyInfoCopy.Author;
                    Url = livelyInfoCopy.Contact;

                    //restoring original thumbnail img..
                    _metadata.ThumbnailPath = thumbnailOriginalPath;
                    _metadata.WallpaperInfo.Thumbnail = _metadata.WallpaperInfo.IsAbsolutePath ? thumbnailOriginalPath : Path.GetFileName(thumbnailOriginalPath);
                    //restore tile img..
                    _metadata.ImagePath = null;
                    _metadata.ImagePath = _settings.Settings.GUIRendering == GUIState.normal ?
                        (File.Exists(_metadata.PreviewClipPath) ? _metadata.PreviewClipPath : _metadata.ThumbnailPath) : _metadata.ThumbnailPath;

                    //change from pos 0..
                    _metadata.Status = WallpaperProcessStatus.ready;
                    _libraryVm.SortLibraryItem((Wallpaper)_metadata);
                }
                else
                {
                    //nothing, core will terminate and delete the wp folder when LivelyInfo.json not found..
                }
            }
        }

        #endregion interface methods

        #region helpers

        private string GetLastSegmentUrl(string url)
        {
            try
            {
                var uri = new Uri(url);
                var segment = uri.Segments.Last();
                return (segment == "/" || segment == "//") ? uri.Host.Replace("www.", string.Empty) : segment.Replace("/", string.Empty);
            }
            catch
            {
                return url;
            }
        }

        #endregion helpers
    }
}
